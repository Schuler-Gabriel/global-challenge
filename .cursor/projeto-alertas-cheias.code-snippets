{
  "FastAPI Endpoint": {
    "scope": "python",
    "prefix": "fastapi-endpoint",
    "body": [
      "@app.${1:get}(\"/${2:endpoint}\")",
      "async def ${3:function_name}(${4:params}):",
      "    \"\"\"",
      "    ${5:Description}",
      "    \"\"\"",
      "    try:",
      "        ${6:# Implementation}",
      "        return {\"status\": \"success\", \"data\": result}",
      "    except Exception as e:",
      "        logger.error(f\"Error in ${3:function_name}: {e}\")",
      "        raise HTTPException(status_code=500, detail=str(e))",
    ],
    "description": "Endpoint FastAPI com tratamento de erro",
  },

  "Domain Entity": {
    "scope": "python",
    "prefix": "domain-entity",
    "body": [
      "from dataclasses import dataclass",
      "from datetime import datetime",
      "from typing import Optional",
      "",
      "@dataclass",
      "class ${1:EntityName}:",
      "    \"\"\"",
      "    ${2:Entity description}",
      "    \"\"\"",
      "    ${3:field}: ${4:type}",
      "    ${5:created_at}: datetime = field(default_factory=datetime.now)",
      "    ${6:id}: Optional[str] = None",
      "",
      "    def __post_init__(self):",
      "        ${7:# Validation logic}",
      "        pass",
    ],
    "description": "Entidade de domínio com dataclass",
  },

  "Use Case": {
    "scope": "python",
    "prefix": "use-case",
    "body": [
      "from abc import ABC, abstractmethod",
      "from typing import Generic, TypeVar",
      "",
      "TInput = TypeVar('TInput')",
      "TOutput = TypeVar('TOutput')",
      "",
      "class ${1:UseCaseName}(ABC, Generic[TInput, TOutput]):",
      "    \"\"\"",
      "    ${2:Use case description}",
      "    \"\"\"",
      "",
      "    def __init__(self, ${3:dependencies}):",
      "        ${4:# Initialize dependencies}",
      "        pass",
      "",
      "    async def execute(self, input_data: TInput) -> TOutput:",
      "        \"\"\"",
      "        ${5:Execute use case}",
      "        \"\"\"",
      "        ${6:# Implementation}",
      "        pass",
    ],
    "description": "Use case com padrão Clean Architecture",
  },

  "External API Client": {
    "scope": "python",
    "prefix": "external-api-client",
    "body": [
      "import httpx",
      "from typing import Dict, Any, Optional",
      "import logging",
      "",
      "class ${1:ApiClient}:",
      "    \"\"\"",
      "    Cliente para API externa: ${2:API description}",
      "    \"\"\"",
      "",
      "    def __init__(self, base_url: str, timeout: int = 10):",
      "        self.base_url = base_url",
      "        self.timeout = timeout",
      "        self.logger = logging.getLogger(__name__)",
      "",
      "    async def ${3:method_name}(self, ${4:params}) -> Dict[str, Any]:",
      "        \"\"\"",
      "        ${5:Method description}",
      "        \"\"\"",
      "        async with httpx.AsyncClient() as client:",
      "            try:",
      "                response = await client.get(",
      "                    f\"{self.base_url}/${6:endpoint}\",",
      "                    timeout=self.timeout",
      "                )",
      "                response.raise_for_status()",
      "                return response.json()",
      "            except httpx.RequestError as e:",
      "                self.logger.error(f\"Request error: {e}\")",
      "                raise",
      "            except httpx.HTTPStatusError as e:",
      "                self.logger.error(f\"HTTP error: {e}\")",
      "                raise",
    ],
    "description": "Cliente para API externa com httpx",
  },

  "Feature Controller": {
    "scope": "python",
    "prefix": "feature-controller",
    "body": [
      "from fastapi import APIRouter, HTTPException, Depends",
      "from typing import List",
      "import logging",
      "",
      "from .schemas import ${1:RequestSchema}, ${2:ResponseSchema}",
      "from ..application.usecases import ${3:UseCase}",
      "",
      "router = APIRouter(prefix=\"/${4:feature}\", tags=[\"${4:feature}\"])",
      "logger = logging.getLogger(__name__)",
      "",
      "@router.${5:post}(\"/${6:endpoint}\")",
      "async def ${7:handler_name}(",
      "    request: ${1:RequestSchema},",
      "    use_case: ${3:UseCase} = Depends()",
      ") -> ${2:ResponseSchema}:",
      "    \"\"\"",
      "    ${8:Endpoint description}",
      "    \"\"\"",
      "    try:",
      "        result = await use_case.execute(request)",
      "        return ${2:ResponseSchema}(**result.dict())",
      "    except Exception as e:",
      "        logger.error(f\"Error in ${7:handler_name}: {e}\")",
      "        raise HTTPException(status_code=500, detail=str(e))",
    ],
    "description": "Controller para feature com Clean Architecture",
  },

  "Guaiba API Client": {
    "scope": "python",
    "prefix": "guaiba-api-client",
    "body": [
      "import httpx",
      "from typing import Dict, Float",
      "from datetime import datetime",
      "import logging",
      "",
      "class GuaibaApiClient:",
      "    \"\"\"",
      "    Cliente para API do nível do Rio Guaíba",
      "    URL: https://nivelguaiba.com.br/portoalegre.1day.json",
      "    \"\"\"",
      "",
      "    def __init__(self, base_url: str = \"https://nivelguaiba.com.br\"):",
      "        self.base_url = base_url",
      "        self.logger = logging.getLogger(__name__)",
      "",
      "    async def get_current_level(self) -> float:",
      "        \"\"\"",
      "        Obtém o nível atual do Rio Guaíba",
      "        Retorna o valor mais recente do JSON",
      "        \"\"\"",
      "        async with httpx.AsyncClient() as client:",
      "            try:",
      "                response = await client.get(",
      "                    f\"{self.base_url}/portoalegre.1day.json\",",
      "                    timeout=10.0",
      "                )",
      "                response.raise_for_status()",
      "                data = response.json()",
      "                ",
      "                # Extrair valor mais recente (último timestamp)",
      "                if data:",
      "                    latest_timestamp = max(data.keys())",
      "                    return float(data[latest_timestamp])",
      "                else:",
      "                    raise ValueError(\"No data available\")",
      "                    ",
      "            except httpx.RequestError as e:",
      "                self.logger.error(f\"Request error: {e}\")",
      "                raise",
      "            except httpx.HTTPStatusError as e:",
      "                self.logger.error(f\"HTTP error: {e}\")",
      "                raise",
    ],
    "description": "Cliente específico para API do Rio Guaíba",
  },

  "CPTEC API Client": {
    "scope": "python",
    "prefix": "cptec-api-client",
    "body": [
      "import httpx",
      "from typing import Dict, Any",
      "import logging",
      "",
      "class CptecApiClient:",
      "    \"\"\"",
      "    Cliente para API meteorológica do CPTEC",
      "    URL: https://www.cptec.inpe.br/api/forecast-input",
      "    \"\"\"",
      "",
      "    def __init__(self, base_url: str = \"https://www.cptec.inpe.br/api\"):",
      "        self.base_url = base_url",
      "        self.logger = logging.getLogger(__name__)",
      "",
      "    async def get_current_weather(self, city: str = \"Porto Alegre, RS\") -> Dict[str, Any]:",
      "        \"\"\"",
      "        Obtém dados meteorológicos atuais para a cidade",
      "        \"\"\"",
      "        async with httpx.AsyncClient() as client:",
      "            try:",
      "                response = await client.get(",
      "                    f\"{self.base_url}/forecast-input\",",
      "                    params={\"city\": city},",
      "                    timeout=10.0",
      "                )",
      "                response.raise_for_status()",
      "                return response.json()",
      "                ",
      "            except httpx.RequestError as e:",
      "                self.logger.error(f\"Request error: {e}\")",
      "                raise",
      "            except httpx.HTTPStatusError as e:",
      "                self.logger.error(f\"HTTP error: {e}\")",
      "                raise",
    ],
    "description": "Cliente específico para API do CPTEC",
  },

  "Alert Classification Service": {
    "scope": "python",
    "prefix": "alert-classification-service",
    "body": [
      "from dataclasses import dataclass",
      "from enum import Enum",
      "",
      "class AlertLevel(Enum):",
      "    BAIXO = \"Baixo\"",
      "    MODERADO = \"Moderado\"",
      "    ALTO = \"Alto\"",
      "    CRITICO = \"Crítico\"",
      "",
      "class AlertAction(Enum):",
      "    MONITORAMENTO = \"Monitoramento\"",
      "    ATENCAO = \"Atenção\"",
      "    ALERTA = \"Alerta\"",
      "    EMERGENCIA = \"Emergência\"",
      "",
      "@dataclass",
      "class AlertResult:",
      "    nivel: AlertLevel",
      "    acao: AlertAction",
      "    river_level: float",
      "    rain_prediction: float",
      "",
      "class AlertClassificationService:",
      "    \"\"\"",
      "    Serviço de classificação de alertas baseado na matriz de regras",
      "    \"\"\"",
      "",
      "    def classify_alert(self, river_level: float, rain_prediction: float) -> AlertResult:",
      "        \"\"\"",
      "        Classifica nível de alerta baseado no nível do rio e previsão de chuva",
      "        \"\"\"",
      "        if river_level > 3.60:",
      "            return AlertResult(",
      "                nivel=AlertLevel.CRITICO,",
      "                acao=AlertAction.EMERGENCIA,",
      "                river_level=river_level,",
      "                rain_prediction=rain_prediction",
      "            )",
      "        elif river_level > 3.15 and rain_prediction > 50:",
      "            return AlertResult(",
      "                nivel=AlertLevel.ALTO,",
      "                acao=AlertAction.ALERTA,",
      "                river_level=river_level,",
      "                rain_prediction=rain_prediction",
      "            )",
      "        elif river_level > 2.80 and rain_prediction > 20:",
      "            return AlertResult(",
      "                nivel=AlertLevel.MODERADO,",
      "                acao=AlertAction.ATENCAO,",
      "                river_level=river_level,",
      "                rain_prediction=rain_prediction",
      "            )",
      "        else:",
      "            return AlertResult(",
      "                nivel=AlertLevel.BAIXO,",
      "                acao=AlertAction.MONITORAMENTO,",
      "                river_level=river_level,",
      "                rain_prediction=rain_prediction",
      "            )",
    ],
    "description": "Serviço de classificação de alertas com enums e dataclass",
  },

  "Pydantic Schema": {
    "scope": "python",
    "prefix": "pydantic-schema",
    "body": [
      "class ${1:SchemaName}(BaseModel):",
      "    \"\"\"",
      "    ${2:Description}",
      "    \"\"\"",
      "    ${3:field}: ${4:type} = Field(..., description=\"${5:Description}\")",
      "    ",
      "    class Config:",
      "        schema_extra = {",
      "            \"example\": {",
      "                \"${3:field}\": ${6:example_value}",
      "            }",
      "        }",
    ],
    "description": "Schema Pydantic com configuração",
  },

  "LSTM Model": {
    "scope": "python",
    "prefix": "lstm-model",
    "body": [
      "def create_lstm_model(sequence_length: int, n_features: int) -> tf.keras.Model:",
      "    \"\"\"",
      "    Cria modelo LSTM para previsão meteorológica",
      "    \"\"\"",
      "    model = tf.keras.Sequential([",
      "        tf.keras.layers.LSTM(${1:50}, return_sequences=True, input_shape=(sequence_length, n_features)),",
      "        tf.keras.layers.Dropout(${2:0.2}),",
      "        tf.keras.layers.LSTM(${3:50}, return_sequences=False),",
      "        tf.keras.layers.Dropout(${2:0.2}),",
      "        tf.keras.layers.Dense(${4:25}),",
      "        tf.keras.layers.Dense(${5:1})  # Precipitação em mm",
      "    ])",
      "    ",
      "    model.compile(",
      "        optimizer='adam',",
      "        loss='mse',",
      "        metrics=['mae']",
      "    )",
      "    ",
      "    return model",
    ],
    "description": "Modelo LSTM para previsão meteorológica",
  },

  "Data Preprocessing": {
    "scope": "python",
    "prefix": "data-preprocessing",
    "body": [
      "def preprocess_weather_data(df: pd.DataFrame) -> Tuple[np.ndarray, np.ndarray]:",
      "    \"\"\"",
      "    Preprocessa dados meteorológicos para o modelo LSTM",
      "    \"\"\"",
      "    # Remover valores faltantes",
      "    df = df.dropna()",
      "    ",
      "    # Normalizar features",
      "    scaler = StandardScaler()",
      "    features = ['temperature', 'humidity', 'pressure', 'precipitation']",
      "    df[features] = scaler.fit_transform(df[features])",
      "    ",
      "    # Criar sequences temporais",
      "    sequence_length = ${1:24}  # 24 horas",
      "    X, y = [], []",
      "    ",
      "    for i in range(sequence_length, len(df)):",
      "        X.append(df[features].iloc[i-sequence_length:i].values)",
      "        y.append(df['precipitation'].iloc[i])",
      "    ",
      "    return np.array(X), np.array(y)",
    ],
    "description": "Preprocessamento de dados meteorológicos",
  },

  "API Service": {
    "scope": "python",
    "prefix": "api-service",
    "body": [
      "class ${1:ServiceName}:",
      "    \"\"\"",
      "    ${2:Service description}",
      "    \"\"\"",
      "    ",
      "    def __init__(self):",
      "        self.logger = logging.getLogger(__name__)",
      "        ${3:# Initialize service}",
      "    ",
      "    async def ${4:method_name}(self, ${5:params}) -> ${6:ReturnType}:",
      "        \"\"\"",
      "        ${7:Method description}",
      "        \"\"\"",
      "        try:",
      "            ${8:# Implementation}",
      "            return result",
      "        except Exception as e:",
      "            self.logger.error(f\"Error in ${4:method_name}: {e}\")",
      "            raise",
    ],
    "description": "Classe de serviço com logging",
  },

  "Test Function": {
    "scope": "python",
    "prefix": "test-function",
    "body": [
      "@pytest.mark.asyncio",
      "async def test_${1:function_name}():",
      "    \"\"\"",
      "    Testa ${2:description}",
      "    \"\"\"",
      "    # Arrange",
      "    ${3:# Setup test data}",
      "    ",
      "    # Act",
      "    ${4:# Execute function}",
      "    ",
      "    # Assert",
      "    ${5:# Verify results}",
      "    assert ${6:condition}, \"${7:Error message}\"",
    ],
    "description": "Função de teste async com pytest",
  },

  "Weather Data Model": {
    "scope": "python",
    "prefix": "weather-model",
    "body": [
      "class WeatherData(BaseModel):",
      "    \"\"\"",
      "    Modelo de dados meteorológicos",
      "    \"\"\"",
      "    temperature: float = Field(..., description=\"Temperatura em Celsius\")",
      "    humidity: float = Field(..., ge=0, le=100, description=\"Umidade em %\")",
      "    pressure: float = Field(..., description=\"Pressão atmosférica em hPa\")",
      "    precipitation: float = Field(..., ge=0, description=\"Precipitação em mm\")",
      "    timestamp: datetime = Field(..., description=\"Data e hora da medição\")",
      "    ",
      "    class Config:",
      "        schema_extra = {",
      "            \"example\": {",
      "                \"temperature\": 25.5,",
      "                \"humidity\": 65.0,",
      "                \"pressure\": 1013.25,",
      "                \"precipitation\": 0.0,",
      "                \"timestamp\": \"2025-01-01T12:00:00\"",
      "            }",
      "        }",
    ],
    "description": "Modelo Pydantic para dados meteorológicos",
  },

  "Alert Response": {
    "scope": "python",
    "prefix": "alert-response",
    "body": [
      "class AlertResponse(BaseModel):",
      "    \"\"\"",
      "    Resposta do sistema de alertas",
      "    \"\"\"",
      "    nivel_alerta: str = Field(..., description=\"Nível do alerta\")",
      "    acao_recomendada: str = Field(..., description=\"Ação recomendada\")",
      "    nivel_rio: float = Field(..., description=\"Nível atual do Rio Guaíba em metros\")",
      "    previsao_chuva: float = Field(..., description=\"Previsão de chuva em 24h (mm)\")",
      "    timestamp: datetime = Field(..., description=\"Timestamp do alerta\")",
      "    ",
      "    class Config:",
      "        schema_extra = {",
      "            \"example\": {",
      "                \"nivel_alerta\": \"Moderado\",",
      "                \"acao_recomendada\": \"Atenção\",",
      "                \"nivel_rio\": 3.0,",
      "                \"previsao_chuva\": 25.5,",
      "                \"timestamp\": \"2025-01-01T12:00:00\"",
      "            }",
      "        }",
    ],
    "description": "Schema de resposta para alertas",
  },
}
