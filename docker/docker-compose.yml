version: "3.8"

services:
  # FastAPI Application
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: alerta_cheias_api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/alerta_cheias
      - GUAIBA_API_URL=https://nivelguaiba.com.br/portoalegre.1day.json
      - CPTEC_API_URL=https://www.cptec.inpe.br/api/forecast-input?city=Porto%20Alegre%2C%20RS
      - API_TIMEOUT=10
      - MAX_RETRIES=3
    volumes:
      - ../data:/app/data:ro
      - ../data/modelos_treinados:/app/models:ro
      - api_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - alerta_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: alerta_cheias_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - alerta_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: alerta_cheias_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=alerta_cheias
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - alerta_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d alerta_cheias"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Training Environment (Jupyter + TensorBoard + MLflow)
  training:
    build:
      context: ..
      dockerfile: docker/Dockerfile.training
    container_name: alerta_cheias_training
    ports:
      - "8888:8888" # Jupyter Lab
      - "6006:6006" # TensorBoard
      - "5000:5000" # MLflow
    environment:
      - JUPYTER_TOKEN=alerta_cheias_dev
      - JUPYTER_ALLOW_ROOT=1
      - PYTHONPATH=/workspace
    volumes:
      - ../notebooks:/workspace/notebooks
      - ../data:/workspace/data
      - ../scripts:/workspace/scripts
      - ../app:/workspace/app
      - model_artifacts:/workspace/models
      - training_logs:/workspace/logs
      # Git configuration for notebooks
      - ~/.gitconfig:/home/mluser/.gitconfig:ro
    networks:
      - alerta_network
    restart: unless-stopped
    profiles:
      - training
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: alerta_cheias_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - alerta_network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: alerta_cheias_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - alerta_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: alerta_cheias_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - alerta_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  # Persistent data volumes
  postgres_data:
    driver: local
    name: alerta_cheias_postgres_data

  redis_data:
    driver: local
    name: alerta_cheias_redis_data

  model_artifacts:
    driver: local
    name: alerta_cheias_models

  training_logs:
    driver: local
    name: alerta_cheias_training_logs

  api_logs:
    driver: local
    name: alerta_cheias_api_logs

  prometheus_data:
    driver: local
    name: alerta_cheias_prometheus_data

  grafana_data:
    driver: local
    name: alerta_cheias_grafana_data

networks:
  alerta_network:
    driver: bridge
    name: alerta_cheias_network
